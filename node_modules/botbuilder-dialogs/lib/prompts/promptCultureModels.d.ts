export interface PromptCultureModel {
    /**
     * Culture Model's Locale.
     * @example
     * "en-US"
     */
    locale: string;
    /**
     * Culture Model's InlineSeparator.
     * @example
     * ", "
     */
    separator: string;
    /**
     * Culture Model's InlineOr.
     * @example
     * " or "
     */
    inlineOr: string;
    /**
     * Culture Model's InlineOrMore.
     * @example
     * ", or "
     */
    inlineOrMore: string;
    /**
     * Equivalent of "Yes" in Culture Model's Language.
     * @example
     * "Yes"
     */
    yesInLanguage: string;
    /**
     * Equivalent of "No" in Culture Model's Language.
     * @example
     * "No"
     */
    noInLanguage: string;
}
/**
 * Class container for currently-supported Culture Models in Confirm and Choice Prompt.
 */
export declare class PromptCultureModels {
    static Chinese: PromptCultureModel;
    static Dutch: PromptCultureModel;
    static English: PromptCultureModel;
    static French: PromptCultureModel;
    static German: PromptCultureModel;
    static Japanese: PromptCultureModel;
    static Portuguese: PromptCultureModel;
    static Spanish: PromptCultureModel;
    /**
     * Use Recognizers-Text to normalize various potential Locale strings to a standard.
     * @param cultureCode Represents locale. Examples: "en-US, en-us, EN".
     * @returns Normalized locale.
     */
    static mapToNearestLanguage: (cultureCode: string) => string;
    static getSupportedCultures: () => PromptCultureModel[];
}
